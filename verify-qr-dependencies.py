#!/usr/bin/env python3
"""
Script de verificaci√≥n de dependencias para QR Code Reader
√ösalo dentro del contenedor Docker para diagnosticar problemas de instalaci√≥n
"""

import sys
import os
from pathlib import Path

def check_system_libraries():
    """Verifica las librer√≠as del sistema"""
    print("=" * 60)
    print("üîç VERIFICANDO LIBRER√çAS DEL SISTEMA")
    print("=" * 60)
    
    try:
        from ctypes.util import find_library
        
        libs_to_check = ['zbar', 'GL', 'glib-2.0', 'SM', 'Xext', 'Xrender']
        
        for lib in libs_to_check:
            location = find_library(lib)
            if location:
                print(f"‚úÖ {lib:15} -> {location}")
            else:
                print(f"‚ùå {lib:15} -> NOT FOUND")
                
    except Exception as e:
        print(f"‚ùå Error checking system libraries: {e}")
    
    print()

def check_python_packages():
    """Verifica los paquetes de Python"""
    print("=" * 60)
    print("üêç VERIFICANDO PAQUETES DE PYTHON")
    print("=" * 60)
    
    # Check pyzbar
    try:
        from pyzbar import pyzbar
        print("‚úÖ pyzbar importado correctamente")
        
        # Try to get version
        try:
            from pyzbar.wrapper import zbar_version
            version = zbar_version()
            print(f"   Versi√≥n de ZBar: {version.decode() if isinstance(version, bytes) else version}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  No se pudo obtener versi√≥n: {e}")
            
    except ImportError as e:
        print(f"‚ùå Error importando pyzbar: {e}")
    except Exception as e:
        print(f"‚ùå Error con pyzbar: {e}")
    
    # Check OpenCV
    try:
        import cv2
        print(f"‚úÖ opencv (cv2) importado correctamente")
        print(f"   Versi√≥n: {cv2.__version__}")
        print(f"   Build info: {cv2.getBuildInformation()[:200]}...")
    except ImportError as e:
        print(f"‚ùå Error importando cv2: {e}")
    except Exception as e:
        print(f"‚ùå Error con cv2: {e}")
    
    # Check PIL/Pillow
    try:
        from PIL import Image
        import PIL
        print(f"‚úÖ PIL/Pillow importado correctamente")
        print(f"   Versi√≥n: {PIL.__version__}")
    except ImportError as e:
        print(f"‚ùå Error importando PIL: {e}")
    except Exception as e:
        print(f"‚ùå Error con PIL: {e}")
    
    # Check numpy
    try:
        import numpy as np
        print(f"‚úÖ numpy importado correctamente")
        print(f"   Versi√≥n: {np.__version__}")
    except ImportError as e:
        print(f"‚ùå Error importando numpy: {e}")
    
    print()

def check_qr_reader():
    """Verifica el m√≥dulo QRCodeReader"""
    print("=" * 60)
    print("üì± VERIFICANDO M√ìDULO QR CODE READER")
    print("=" * 60)
    
    try:
        # Add parent directory to path if running from project root
        project_root = Path(__file__).parent
        sys.path.insert(0, str(project_root))
        
        from apirest.AWSQRReader import QRCodeReader
        print("‚úÖ QRCodeReader importado correctamente")
        
        # Try to instantiate
        try:
            reader = QRCodeReader()
            print("‚úÖ QRCodeReader instanciado correctamente")
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al instanciar QRCodeReader: {e}")
            
    except ImportError as e:
        print(f"‚ùå Error importando QRCodeReader: {e}")
    except Exception as e:
        print(f"‚ùå Error con QRCodeReader: {e}")
    
    print()

def check_environment():
    """Verifica variables de entorno importantes"""
    print("=" * 60)
    print("üåç VARIABLES DE ENTORNO")
    print("=" * 60)
    
    env_vars = [
        'LD_LIBRARY_PATH',
        'PYTHONPATH',
        'AWS_ACCESS_KEY_ID',
        'AWS_SECRET_ACCESS_KEY',
        'AWS_S3_BUCKET',
    ]
    
    for var in env_vars:
        value = os.environ.get(var)
        if value:
            # Hide sensitive values
            if 'KEY' in var or 'SECRET' in var:
                display_value = '*' * 10
            else:
                display_value = value
            print(f"‚úÖ {var:25} = {display_value}")
        else:
            print(f"‚ö†Ô∏è  {var:25} = NOT SET")
    
    print()

def check_filesystem():
    """Verifica archivos y permisos"""
    print("=" * 60)
    print("üìÅ SISTEMA DE ARCHIVOS")
    print("=" * 60)
    
    paths_to_check = [
        '/app',
        '/app/apirest',
        '/app/apirest/AWSQRReader.py',
        '/app/logs',
        '/usr/lib/x86_64-linux-gnu/libzbar.so',
        '/usr/lib/x86_64-linux-gnu/libzbar.so.0',
    ]
    
    for path in paths_to_check:
        p = Path(path)
        if p.exists():
            print(f"‚úÖ {path}")
            if p.is_file():
                stat = p.stat()
                print(f"   Tama√±o: {stat.st_size} bytes, Permisos: {oct(stat.st_mode)[-3:]}")
        else:
            print(f"‚ùå {path} NO EXISTE")
    
    print()

def main():
    """Ejecuta todas las verificaciones"""
    print("\n")
    print("üîß DIAGN√ìSTICO DE DEPENDENCIAS PARA QR CODE READER")
    print(f"üêç Python: {sys.version}")
    print(f"üìç Path: {sys.executable}")
    print("\n")
    
    check_environment()
    check_system_libraries()
    check_python_packages()
    check_filesystem()
    check_qr_reader()
    
    print("=" * 60)
    print("‚úÖ DIAGN√ìSTICO COMPLETO")
    print("=" * 60)
    print("\nSi ves errores arriba, revisa:")
    print("1. Dockerfile.coolify - instalaci√≥n de librer√≠as del sistema")
    print("2. requirements-docker.txt - pyzbar y opencv-python-headless")
    print("3. Permisos del usuario django")
    print("4. Variables de entorno AWS")
    print()

if __name__ == '__main__':
    main()
